#属性测试
com.test.study.name=程序猿t
com.test.study.title=Spring Boot教程
com.test.study.desc=${com.test.study.name}正在努力写《${com.test.study.title}》

# 随机字符串
com.test.study.value=${random.value}
# 随机int
com.test.study.number=${random.int}
# 随机long
com.test.study.bignumber=${random.long}
# 10以内的随机数
com.test.study.test1=${random.int(10)}
# 10-20的随机数
com.test.study.test2=${random.int[10,20]}

#thymeleaf自定义属性
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

#jdbc配置
spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

spring.ldap.embedded.ldif=ldap-server.ldif
spring.ldap.embedded.base-dn=dc=testorg,dc=com
#spring.ldap.urls=ldap://localhost:1235
#spring.ldap.base=dc=testorg,dc=com
#spring.ldap.username=test
#spring.ldap.password=123456

#flyway.locations=classpath:/db

#create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
#update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
#validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值
spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.show_sql=true

#多数据源配置
#spring.datasource.primary.url=jdbc:mysql://localhost:3306/test1
#spring.datasource.primary.username=root
#spring.datasource.primary.password=root
#spring.datasource.primary.driver-class-name=com.mysql.jdbc.Driver

#spring.datasource.secondary.url=jdbc:mysql://localhost:3306/test2
#spring.datasource.secondary.username=root
#spring.datasource.secondary.password=root
#spring.datasource.secondary.driver-class-name=com.mysql.jdbc.Driver

#cachemanage
#spring.cache.type=ehcache
#spring.cache.type=redis
#spring.cache.ehcache.config=classpath:ehcache.xml

# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=localhost
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=0
spring.redis.pool.max-wait=5000
spring.redis.pool.max-active=10

#rabbitmq
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=springboot
spring.rabbitmq.password=123456

# ACTIVEMQ (ActiveMQProperties)
spring.activemq.in-memory=true
#spring.activemq.broker-url= 
#spring.activemq.password= 
#spring.activemq.user= 
#spring.activemq.packages.trust-all=false
#spring.activemq.packages.trusted=
#spring.activemq.pool.configuration.*= 
#spring.activemq.pool.enabled=false
#spring.activemq.pool.expiry-timeout=0
#spring.activemq.pool.idle-timeout=30000
#spring.activemq.pool.max-connections=1


#mongodb
spring.data.mongodb.uri=mongodb://localhost:27017/test

spring.data.mongodb.option.min-connection-per-host=19
spring.data.mongodb.option.max-connection-per-host=201

#mail
spring.mail.host=smtp.163.com
spring.mail.username=xenos_xia@163.com
spring.mail.password=
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true

#文件上传
spring.http.multipart.enabled=true
spring.http.multipart.file-size-threshold=0
spring.http.multipart.location=d:/tmp
spring.http.multipart.max-file-size=5Mb
spring.http.multipart.max-request-size=10Mb

#server.port=8080
# 多环境配置文件激活属性

#spring.profiles.active=dev